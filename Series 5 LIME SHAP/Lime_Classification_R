# Conditional Install
cond.install <- function(package.name){
options(repos = "http://cran.rstudio.com") #set repo
#check for package in library, if package is missing install
if(package.name%in%rownames(installed.packages())==FALSE) {
install.packages(package.name, .libPaths()[2])}else{require(package.name, character.only = TRUE)}}

# conditionally install package
cond.install('lime')


library(lime)
library(caret)
library(gbm)
library(randomForest)
library(nnet)
library(stats)
library(e1071)
library(survey)
library(earth)
library(glmnet)


the.model <- read.Alteryx("#1")
if (!all(names(the.model) %in% c("Name", "Object")))
	stop.Alteryx("A model object was not provided")
model <- unserializeObject(as.character(the.model$Object[1]))
model = as_classifier(model)


### Create Logistic Regression Functions
model_type.glm <- function(x, ...) {
  return("classification")
}

predict_model.glm <- function(x, newdata, ...) {
  pred <- predict(x, newdata, type="response", na.action = na.pass)
  return(as.data.frame(pred))
}

### Create SVM Functions
model_type.svm <- function(x, ...) {
  return("classification")
}

predict_model.svm <- function(x, newdata, ...) {
  pred <- predict(x, newdata, decision.values = TRUE, probability = TRUE, na.action = na.omit)
  pred = attr(pred, "probabilities")
	return(as.data.frame(pred))
}


### Create earth/MARS/Spline Functions
model_type.earth <- function(x, ...) {
  return("classification")
}

predict_model.earth <- function(x, newdata, ...) {
  pred <- predict(x, newdata, type = "response")
  return(as.data.frame(pred))
}



### Create Naive Bayes Functions
model_type.naiveBayes <- function(x, ...) {
  return("classification")
}

predict_model.naiveBayes <- function(x, newdata, ...) {
  pred <- predict(x, newdata, type="raw", na.action = na.pass)
  return(as.data.frame(pred))
}


### Create Graident Boosted Model Functions
model_type.gbm <- function(x, ...) {
  return("classification")
}

predict_model.gbm <- function(x, newdata, ...) {
	pred <- predict(x, newdata, type = "response", n.trees = x$best.trees)
  if (class(pred) == "array") {
    pred1 <- pred[,,1]
    if (inherits(pred1, 'numeric')) pred1 <- t(as.matrix(pred1))
  } else {
    pred1 <- cbind(pred, 1 - pred)
  }
  as.data.frame(pred1)
}


### Create Neural Network Functions
model_type.nnet.formula <- function(x, ...) {
  return("classification")
}

predict_model.nnet.formula <- function(x, newdata, ...) {
  pred <- predict(x, newdata, type="raw", na.action = na.pass)
  return(as.data.frame(pred))
}


# Load data

set.seed(7)
train = read.Alteryx("#2", mode="data.frame")
test = read.Alteryx("#3", mode="data.frame")


# Create an explainer object
explainer <- lime(train, model)


# Explain new observation

if ('%Question.auto.var%' == "True") {
	explanation <- explain(test, explainer, n_labels = 1, n_features = %Question.feature.var%, n_permutations = %Question.permute.var%)
}


if ('%Question.manual.var%' == "True") {
  explanation <- explain(test, explainer, labels = "%Question.specific.var%" , n_features = %Question.feature.var%, n_permutations = %Question.permute.var%)
}



AlteryxGraph(1, width=786, height=786)

plot_features(explanation)

invisible(dev.off())


AlteryxGraph(2, width=786, height=786)

plot_explanations(explanation)

invisible(dev.off())


explanation[] = lapply(explanation, as.character)

write.Alteryx(explanation, 3)


